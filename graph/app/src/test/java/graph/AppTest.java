/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test
    public void addNode() {
        Graph graph = new Graph();

        graph.addVertex("Mohammad");
        graph.addVertex("Mohammad2");

        assertNotNull(graph.getVertices());
        assertEquals(2, graph.getVertices().size());
        assertTrue(graph.getVertices().contains(new Vertex("Mohammad")));
    }

    @Test
    public void addEdge() {
        Graph graph = new Graph();

        graph.addVertex("Mohammad");
        graph.addVertex("Mohammad2");

        graph.addEdge("Mohammad", "Mohammad2");

        assertNotNull(graph.getVertices());
        assertEquals(2, graph.getVertices().size());
        assertTrue(graph.getNeighbors("Mohammad").contains(new Vertex("Mohammad2")));
        assertTrue(graph.getNeighbors("Mohammad2").contains(new Vertex("Mohammad")));
    }

    @Test
    public void allNodes() {
        Graph graph = new Graph();

        graph.addVertex("Mohammad");
        graph.addVertex("Mohammad2");
        graph.addVertex("Mohammad3");

        assertEquals(3, graph.getVertices().size());
        assertTrue(graph.getVertices().contains(new Vertex("Mohammad")));
        assertTrue(graph.getVertices().contains(new Vertex("Mohammad2")));
        assertTrue(graph.getVertices().contains(new Vertex("Mohammad3")));
        assertFalse(graph.getVertices().contains(new Vertex("Mohammad4")));
    }

    @Test
    public void nodeNeighbors() {
        Graph graph = new Graph();

        graph.addVertex("Mohammad");
        graph.addVertex("Mohammad2");

        graph.addEdge("Mohammad", "Mohammad2");

        assertEquals(1, graph.getNeighbors("Mohammad").size());
        assertTrue(graph.getNeighbors("Mohammad").contains(new Vertex("Mohammad2")));
        assertTrue(graph.getNeighbors("Mohammad2").contains(new Vertex("Mohammad")));
    }

    @Test
    public void nodeNeighborsWeight() {
        Graph graph = new Graph();

        graph.addVertex("Mohammad");
        graph.addVertex("Mohammad2");
        graph.addVertex("Mohammad3");

        graph.addEdge("Mohammad", "Mohammad2", 3);
        graph.addEdge("Mohammad", "Mohammad3", 2);

        assertEquals(2, graph.getNeighbors("Mohammad").size());
        assertEquals(3, graph.getNeighbors("Mohammad").get(0).weight);
        assertEquals(2, graph.getNeighbors("Mohammad").get(1).weight);
    }

    @Test
    public void emptyGraph() {
        Graph graph = new Graph();

        assertNull(graph.getNeighbors("Mohammad"));
    }

    @Test
    public void oneNodeOneEdge() {
        Graph graph = new Graph();
        graph.addVertex("Mohammad");
        graph.addEdge("Mohammad", "Mohammad");

        System.out.println(graph.getNeighbors("Mohammad"));

        assertEquals(2, graph.getNeighbors("Mohammad").size());
        assertTrue(graph.getNeighbors("Mohammad").contains(new Vertex("Mohammad")));
        assertEquals(1, graph.getVertices().size());

    }

    @Test
    public void breadthFirstTraversal() {
        Graph testGraph = new Graph();
        Vertex v1 = testGraph.addVertex("A");
        testGraph.addVertex("B");
        testGraph.addVertex("C");
        testGraph.addVertex("D");
        testGraph.addEdge("A", "B");
        testGraph.addEdge("A", "C");
        testGraph.addEdge("B", "D");
        testGraph.addEdge("C", "D");
        assertEquals(4, testGraph.size());
        assertEquals(4, testGraph.getVertices().size());
        List<Vertex> bfsResult = testGraph.breadthFirst(v1);
        assertEquals("A", bfsResult.get(0).label);
        assertEquals("B", bfsResult.get(1).label);
        assertEquals("C", bfsResult.get(2).label);
        assertEquals("D", bfsResult.get(3).label);
    }
}
